#!/bin/bash

##########################
# COMMAND LINE TOOL TEST #
##########################

#Test Case 1:
#File:                test_case_1.txt
#Distribution:        Normal
#Average:             29338.9071 us
#Standard deviation:  3689.5235 us
#Prosit parameters:
#  Period (T):               100000 us
#  Reservation period (Ts):  25000 us
#  Budget (q):               [7500 - 10000] us, with an increment of 250 us 
T=100000
Ts=25000
step=100
increment=250
for ((q=7500; q<=10000; q+=$increment)); do
  echo "Q="${q} " T="$T " Ts="$Ts " step="$step
  ../solver --cyclic \
            --budget ${q} \
            --task_period ${T} \
            --period ${Ts} \
            test_case_1.txt \
            z_2.txt \
            --verbose \
            --step ${step} \
            -M 4 | grep "P { d <" &> results_${q}_normal_command_line.txt
done

#Test Case 2:
#File:           test_case_2.txt
#Distribution:   Beta
#Alpha:          4.19843
#Beta:           24.6793
#Prosit parameters:
#  Period (T):               40000 us
#  Reservation period (Ts):  20000 us
#  Budget (q):               [7600 - 16000] us, with an increment of 200 us
T=40000
Ts=20000
step=100
increment=200
for ((q=7500; q<=10000; q+=$increment)); do
  echo "Q="${q} " T="$T " Ts="$Ts " step="$step
  ../solver --cyclic \
            --budget ${q} \
            --task_period ${T} \
            --period ${Ts} \
            test_case_2.txt \
            z_2.txt \
            --verbose \
            --step ${step} \
            -M 4 | grep "P { d <" &> results_${q}_beta_command_line.txt
done

#################
# XML TOOL TEST #
#################
##############
#Test Case 1 #
##############
T=100000
Ts=25000
step=100
increment=250
budget=7500
#XML file creation
for ((q=7500; q<=10000; q+=$increment)); do
  echo "<solve>
          <task type=\"periodic\" schedule=\"RR\" name=\"0.3\" algorithm=\"cyclic\">
            <period>${T}</period>
            <serverPeriod>${Ts}</serverPeriod>
            <serverBudget>${q}</serverBudget>
            <pmfComputation type=\"beta\">
              <step>${step}</step>
              <file>test_case_1.txt</file>
            </pmfComputation>
            <pmfInterarrival type=\"beta\">
              <step>${step}</step>
              <file>z_2.txt</file>
            </pmfInterarrival>
            <qosfun type=\"linear\">
              <pmin>0.01</pmin>
              <pmax>0.95</pmax>
              <scale>0.5</scale>
              <offset>0.95</offset>
            </qosfun>
            <Delta>7500</Delta>
            <maxDeadline>4</maxDeadline>
          </task>
        </solve>" > xml_test_${q}_normal.xml
done
#Run PROSIT from xml
for f in $(find . -regex ".*/xml_test_[0-9]*_normal.xml"); do
  echo "Q="${budget} " T="$T " Ts="$Ts " step="$step
  .././xml_solver ${f} --verbose | grep "P {" &> results_${budget}_normal_xml.txt
  budget=$((budget+$increment))
done

##############
#Test Case 2 #
##############
T=40000
Ts=20000
step=100
increment=200
budget=7500
#XML file creation
for ((q=7500; q<=10000; q+=$increment)); do
  echo "<solve>
          <task type=\"periodic\" schedule=\"RR\" name=\"0.3\" algorithm=\"cyclic\">
            <period>${T}</period>
            <serverPeriod>${Ts}</serverPeriod>
            <serverBudget>${q}</serverBudget>
            <pmfComputation type=\"beta\">
              <step>${step}</step>
              <file>test_case_2.txt</file>
            </pmfComputation>
            <pmfInterarrival type=\"beta\">
              <step>${step}</step>
              <file>z_2.txt</file>
            </pmfInterarrival>
            <qosfun type=\"linear\">
              <pmin>0.01</pmin>
              <pmax>0.95</pmax>
              <scale>0.5</scale>
              <offset>0.95</offset>
            </qosfun>
            <Delta>7500</Delta>
            <maxDeadline>4</maxDeadline>
          </task>
        </solve>" > xml_test_${q}_beta.xml
done
#Run PROSIT from xml
for f in $(find . -regex ".*/xml_test_[0-9]*_beta.xml"); do
  echo "Q="${budget} " T="$T " Ts="$Ts " step="$step
  .././xml_solver $f --verbose | grep "P {" &> results_${budget}_beta_xml.txt
  budget=$((budget+$increment))
done
echo -e "\033[1m\nTESTS COMPLETED!!"